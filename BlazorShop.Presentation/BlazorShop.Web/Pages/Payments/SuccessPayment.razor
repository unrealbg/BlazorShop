@page "/payment-success"
@page "/payment-success/{bt:int?}"

<section style="width:100%; min-height:50vh; display:flex; justify-content:center; align-items:flex-start; padding:3rem 1rem;">
    <div class="card shadow-sm" style="width:100%; max-width:720px; margin:0 auto;">
        <div class="card-header text-center">
            <h4 class="mb-0">Payment Success</h4>
        </div>
        <div class="card-body">
            <div class="alert alert-success text-center" role="alert">
                <h4 class="alert-heading">Thank you for your purchase!</h4>
                <p>Your payment was successful. Your order will be delivered soon.</p>
                <hr>
                <p class="mb-0">You can track your order in the <a href="/my-orders">My Orders</a> page.</p>
            </div>
        </div>
    </div>
</section>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? UserAuthState { get; set; }

    [Parameter]
    public int? Bt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (UserAuthState is null)
            {
                return;
            }

            var authState = await UserAuthState;
            var user = authState?.User;
            if (user?.Identity?.IsAuthenticated == true)
            {
                var cartString = await CookieStorageService.GetAsync(Constant.Cart.Name);
                if (!string.IsNullOrEmpty(cartString))
                {
                    var list = JsonSerializer.Deserialize<IEnumerable<ProcessCart>>(cartString) ?? Enumerable.Empty<ProcessCart>();
                    var userId = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;

                    if (!string.IsNullOrEmpty(userId) && list.Any())
                    {
                        if (Bt.GetValueOrDefault() != 1)
                        {
                            var arc = list.Select(x => new CreateOrderItem
                            {
                                ProductId = x.ProductId,
                                Quantity = x.Quantity,
                                UserId = userId
                            });

                            await CartService.SaveCheckoutHistory(arc);
                        }

                        await CookieStorageService.RemoveAsync(Constant.Cart.Name);
                    }
                }
            }
        }
        catch
        {
            // ignored
        }
    }
}

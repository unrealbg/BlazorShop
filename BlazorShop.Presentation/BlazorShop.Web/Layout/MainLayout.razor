@using BlazorShop.Web.Components.Header
@using BlazorShop.Web.Shared.Models.Product
@using BlazorShop.Web.Shared.Services.Contracts
@inherits LayoutComponentBase
@implements IAsyncDisposable

<div class="min-h-screen flex flex-col bg-gradient-to-b from-sky-100 to-sky-200 text-neutral-900">
    <Toast />

    <div class="clip-diagonal bg-neutral-900/95 text-neutral-100 border-b border-white/10 hidden md:block relative">
        <a href="/" class="hidden md:inline-flex flex-col leading-none select-none absolute left-20 sm:left-24 lg:left-28 top-1/2 -translate-y-1/2">
            <span class="text-sm font-extrabold tracking-wider">BLAZORSHOP®</span>
            <span class="text-[10px] text-neutral-400 -mt-0.5">E‑COMMERCE APPLICATION</span>
        </a>

        <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 h-12 sm:h-14 flex items-center justify-center">
            <nav class="hidden md:flex items-center gap-2 sm:gap-3 text-sm sm:text-[0.95rem] font-medium whitespace-nowrap">
                <NavLink href="/" Match="NavLinkMatch.All" class="px-3 py-1.5 rounded-md text-neutral-200 hover:text-white hover:bg-white/10 transition-colors" ActiveClass="bg-white/20 text-white">Home</NavLink>
                <NavLink href="about-us" class="px-3 py-1.5 rounded-md text-neutral-200 hover:text-white hover:bg-white/10 transition-colors" ActiveClass="bg-white/20 text-white">About&nbsp;us</NavLink>
                <NavLink href="new-releases" class="px-3 py-1.5 rounded-md text-neutral-200 hover:text-white hover:bg-white/10 transition-colors" ActiveClass="bg-white/20 text-white">New&nbsp;Releases</NavLink>
                <NavLink href="todays-deals" class="px-3 py-1.5 rounded-md text-neutral-200 hover:text-white hover:bg-white/10 transition-colors" ActiveClass="bg-white/20 text-white">Today&#39;s&nbsp;Deals</NavLink>
                <NavLink href="customer-service" class="px-3 py-1.5 rounded-md text-neutral-200 hover:text-white hover:bg-white/10 transition-colors" ActiveClass="bg-white/20 text-white">Customer&nbsp;Service</NavLink>
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <NavLink href="admin" class="px-3 py-1.5 rounded-md text-amber-300 hover:text-white hover:bg-amber-400/10 transition-colors" ActiveClass="bg-amber-400/20 text-white">Admin</NavLink>
                    </Authorized>
                </AuthorizeView>
            </nav>
        </div>
    </div>

    <header class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-4 flex items-center gap-4">
        <button class="flex flex-col gap-1.5 shrink-0 md:hidden" aria-label="Open menu" @onclick="ToggleMobileMenu">
            <span class="block h-0.5 w-8 bg-neutral-900"></span>
            <span class="block h-0.5 w-8 bg-neutral-900"></span>
            <span class="block h-0.5 w-8 bg-neutral-900"></span>
        </button>
        <button class="hidden md:inline-flex items-center gap-2 rounded-md bg-neutral-900 text-white px-3 py-2 text-sm font-medium hover:bg-neutral-800" @onclick="ToggleCategories">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="h-4 w-4"><path d="M4 6h16M4 12h16M4 18h16"/></svg>
            Categories
        </button>
        <div class="flex-1 flex justify-center">
            <SearchBarComponent Products="@_headerProducts" />
        </div>
        <div class="flex items-center gap-5 text-sm">
            <div class="relative inline-flex items-center gap-2">
                <a href="my-cart" class="relative inline-block" aria-label="Cart">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="h-6 w-6"><path d="M6 6h15l-1.5 9h-12z"/><path d="M6 6 5 3H3"/><circle cx="9" cy="20" r="1"/><circle cx="18" cy="20" r="1"/></svg>
                    @if (_cartCount > 0)
                    {
                        <span class="absolute -top-2 -right-2 inline-flex items-center justify-center rounded-full bg-red-600 text-white text-[10px] font-bold h-5 min-w-5 px-1 z-20">@_cartCount</span>
                    }
                </a>
            </div>
            <div class="relative">
                <details class="group" @ref="_mainAccountDetails">
                    <summary class="list-none inline-flex items-center gap-2 cursor-pointer select-none" aria-label="Account">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="h-6 w-6"><circle cx="12" cy="8" r="4"/><path d="M6 22c0-3.3 2.7-6 6-6s6 2.7 6 6"/></svg>
                    </summary>
                    <div class="absolute right-0 mt-2 w-44 rounded-md border border-neutral-200 bg-white shadow-lg p-1 hidden group-open:block z-50">
                        <AuthorizeView>
                            <Authorized>
                                <div class="px-3 py-2 text-xs text-neutral-500">Signed in</div>
                                <div class="h-px bg-neutral-200 my-1"></div>
                                <a class="block px-3 py-2 rounded hover:bg-neutral-50" href="profile" @onclick="CloseHeaderMenu">Profile</a>
                                <a class="block px-3 py-2 rounded hover:bg-neutral-50" href="/authentication/logout" @onclick="CloseHeaderMenu">Logout</a>
                            </Authorized>
                            <NotAuthorized>
                                <a class="block px-3 py-2 rounded hover:bg-neutral-50" href="/authentication/login" @onclick="CloseHeaderMenu">Login</a>
                                <a class="block px-3 py-2 rounded hover:bg-neutral-50" href="/authentication/register" @onclick="CloseHeaderMenu">Register</a>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </details>
            </div>
        </div>
    </header>

    @if (_showCategories)
    {
        <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div class="-mt-2 mb-2 rounded-lg border border-neutral-200 bg-white/80 shadow">
                <div class="p-4">
                    <BlazorShop.Web.Layout.CategoryComponent OnCategorySelected="CloseCategories" />
                </div>
            </div>
        </div>
    }

    @if (IsMobileMenuOpen)
    {
        <div class="fixed inset-0 z-50 md:hidden" role="dialog" aria-modal="true">
            <div class="absolute inset-0 bg-black/50" @onclick="CloseMobileMenu"></div>
            <div class="absolute right-0 top-0 h-full w-72 max-w-[80vw] bg-white shadow-xl p-4 flex flex-col">
                <div class="flex items-center justify-between">
                    <div class="text-sm font-semibold tracking-wide">Menu</div>
                    <button class="p-1 rounded hover:bg-neutral-100" @onclick="CloseMobileMenu" aria-label="Close">✕</button>
                </div>
                <nav class="mt-4 flex-1 space-y-1 text-sm">
                    <NavLink href="/" Match="NavLinkMatch.All" class="block rounded px-3 py-2 hover:bg-neutral-100" ActiveClass="bg-neutral-200" @onclick="CloseMobileMenu">Home</NavLink>
                    <NavLink href="about-us" class="block rounded px-3 py-2 hover:bg-neutral-100" ActiveClass="bg-neutral-200" @onclick="CloseMobileMenu">About us</NavLink>
                    <NavLink href="new-releases" class="block rounded px-3 py-2 hover:bg-neutral-100" ActiveClass="bg-neutral-200" @onclick="CloseMobileMenu">New Releases</NavLink>
                    <NavLink href="todays-deals" class="block rounded px-3 py-2 hover:bg-neutral-100" ActiveClass="bg-neutral-200" @onclick="CloseMobileMenu">Today&#39;s Deals</NavLink>
                    <NavLink href="customer-service" class="block rounded px-3 py-2 hover:bg-neutral-100" ActiveClass="bg-neutral-200" @onclick="CloseMobileMenu">Customer Service</NavLink>
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <NavLink href="admin" class="block rounded px-3 py-2 hover:bg-neutral-100 text-amber-700" ActiveClass="bg-amber-100" @onclick="CloseMobileMenu">Admin</NavLink>
                        </Authorized>
                    </AuthorizeView>
                </nav>
            </div>
        </div>
    }

    <main class="flex-1">
        @Body
    </main>

    <Footer />
</div>

@code {
    private bool IsMobileMenuOpen;
    private bool _showCategories;
    private IEnumerable<GetProduct> _headerProducts = Enumerable.Empty<GetProduct>();

    private int _cartCount;
    [Inject] private IJSRuntime Js { get; set; } = default!;
    private IJSObjectReference? _cartModule;
    private DotNetObjectReference<MainLayout>? _selfRef;
    private ElementReference _mainAccountDetails;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _headerProducts = await ProductService.GetAllAsync();
        }
        catch
        {
            _headerProducts = Enumerable.Empty<GetProduct>();
        }

        await LoadCartCountAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _cartModule = await Js.InvokeAsync<IJSObjectReference>("import", "./js/cartBadge.js");
            _selfRef = DotNetObjectReference.Create(this);
            if (_cartModule is not null)
            {
                try
                {
                    var json = await _cartModule.InvokeAsync<string?>("getCartCookie");
                    if (!string.IsNullOrWhiteSpace(json))
                    {
                        UpdateCountFromJson(json!);
                        await InvokeAsync(StateHasChanged);
                    }
                }
                catch { }

                await _cartModule.InvokeVoidAsync("subscribeCartChanges", _selfRef);
            }
        }
    }

    [JSInvokable]
    public async Task RefreshCartCount()
    {
        await LoadCartCountAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void UpdateCountFromJson(string json)
    {
        try
        {
            var items = System.Text.Json.JsonSerializer.Deserialize<List<BlazorShop.Web.Shared.Models.Payment.ProcessCart>>(json) ?? new();
            _cartCount = items.Sum(i => i.Quantity);
        }
        catch { _cartCount = 0; }
    }

    private async Task LoadCartCountAsync()
    {
        try
        {
            var json = await CookieStorageService.GetAsync(Constant.Cart.Name);
            if (string.IsNullOrWhiteSpace(json)) { _cartCount = 0; return; }
            UpdateCountFromJson(json);
        }
        catch { _cartCount = 0; }
    }

    private void ToggleMobileMenu() => IsMobileMenuOpen = !IsMobileMenuOpen;
    private void CloseMobileMenu() => IsMobileMenuOpen = false;
    private void ToggleCategories() => _showCategories = !_showCategories;
    private void CloseCategories() => _showCategories = false;

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_cartModule is not null)
            {
                await _cartModule.InvokeVoidAsync("unsubscribeCartChanges");
                await _cartModule.DisposeAsync();
            }
        }
        catch { }
        _selfRef?.Dispose();
    }

    private async Task CloseHeaderMenu()
    {
        try
        {
            var mod = await Js.InvokeAsync<IJSObjectReference>("import", "./js/cartBadge.js");
            await mod.InvokeVoidAsync("closeDetails", _mainAccountDetails);
        }
        catch
        {
            // ignored
        }
    }
}
@page "/admin/orders"
@layout AdminLayout

<section class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 mt-8 mb-12 sm:mb-16">
  <div class="rounded-xl bg-white/80 shadow p-6" style="min-height: 600px; overflow: auto">
    <header class="flex items-center justify-between">
      <h2 class="text-2xl font-bold">Orders</h2>
      <button class="inline-flex items-center rounded bg-neutral-900 text-white px-3 py-1 text-sm font-semibold hover:bg-neutral-800" @onclick="ReloadAsync">Reload</button>
    </header>

    <div class="mt-4 overflow-auto">
      <table class="min-w-full text-sm">
        <thead>
          <tr class="bg-neutral-50 text-left">
            <th class="px-3 py-2">Created</th>
            <th class="px-3 py-2">Reference</th>
            <th class="px-3 py-2">Status</th>
            <th class="px-3 py-2">Shipping</th>
            <th class="px-3 py-2">Total (ˆ)</th>
            <th class="px-3 py-2">Actions</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-neutral-200">
          @if (_orders.Any())
          {
            @foreach (var o in _orders)
            {
              <tr>
                <td class="px-3 py-2">@o.CreatedOn.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                <td class="px-3 py-2">@o.Reference</td>
                <td class="px-3 py-2">@o.Status</td>
                <td class="px-3 py-2">@o.ShippingStatus</td>
                <td class="px-3 py-2">@o.TotalAmount.ToString("F2")</td>
                <td class="px-3 py-2">
                  <button class="text-blue-700 hover:underline" @onclick="() => OpenTrackDialog(o)">Edit Tracking</button>
                </td>
              </tr>
            }
          }
          else
          {
            <tr>
              <td class="px-3 py-6 text-center text-neutral-500" colspan="6">No orders</td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>
</section>

<ModalDialog @bind-IsVisible="_showDialog">
  <Header>
    <h5 class="text-lg font-semibold">Edit Tracking</h5>
  </Header>
  <Body>
    <div class="space-y-2">
      <div class="text-xs text-neutral-600">Order: @_editOrder?.Reference</div>
      <input class="border rounded w-full px-2 py-1" placeholder="Carrier" @bind="_carrier" />
      <input class="border rounded w-full px-2 py-1" placeholder="Tracking Number" @bind="_trackingNumber" />
      <input class="border rounded w-full px-2 py-1" placeholder="Tracking Url" @bind="_trackingUrl" />
      <select class="border rounded w-full px-2 py-1" @bind="_shippingStatus">
        <option>PendingShipment</option>
        <option>Shipped</option>
        <option>InTransit</option>
        <option>OutForDelivery</option>
        <option>Delivered</option>
      </select>
    </div>
  </Body>
  <Footer>
    <button class="inline-flex items-center rounded bg-neutral-900 text-white px-3 py-1 text-sm font-semibold hover:bg-neutral-800" @onclick="SaveAsync">Save</button>
    <button class="inline-flex items-center rounded bg-neutral-600 text-white px-3 py-1 text-sm font-semibold hover:bg-neutral-700 ml-2" @onclick="() => _showDialog = false">Close</button>
  </Footer>
</ModalDialog>

@code {
  private List<GetOrder> _orders = new();
  private bool _showDialog;
  private GetOrder? _editOrder;
  private string _carrier = string.Empty;
  private string _trackingNumber = string.Empty;
  private string _trackingUrl = string.Empty;
  private string _shippingStatus = "PendingShipment";

  protected override async Task OnInitializedAsync()
  {
      await ReloadAsync();
  }

  private async Task ReloadAsync()
  {
    var client = await HttpClientHelper.GetPrivateClientAsync();
    var api = new ApiCall { Client = client, Route = Constant.Cart.GetAllOrders, Type = Constant.ApiCallType.Get };
    var http = await ApiCallHelper.ApiCallTypeCall<object>(api);
    _orders = http is null || !http.IsSuccessStatusCode ? new() : (await ApiCallHelper.GetServiceResponse<IEnumerable<GetOrder>>(http)).ToList();
  }

  private void OpenTrackDialog(GetOrder order)
  {
    _editOrder = order;
    _carrier = order.ShippingCarrier ?? string.Empty;
    _trackingNumber = order.TrackingNumber ?? string.Empty;
    _trackingUrl = order.TrackingUrl ?? string.Empty;
    _shippingStatus = order.ShippingStatus;
    _showDialog = true;
  }

  private async Task SaveAsync()
  {
    if (_editOrder is null) return;

    var client = await HttpClientHelper.GetPrivateClientAsync();
    var tApi = new ApiCall { Client = client, Route = $"{Constant.Cart.GetAllOrders}/{_editOrder.Id}/tracking", Type = Constant.ApiCallType.Update, Model = new { Carrier = _carrier, TrackingNumber = _trackingNumber, TrackingUrl = _trackingUrl } };
    var sApi = new ApiCall { Client = client, Route = $"{Constant.Cart.GetAllOrders}/{_editOrder.Id}/shipping-status", Type = Constant.ApiCallType.Update, Model = new { ShippingStatus = _shippingStatus } };

    var tRes = await ApiCallHelper.ApiCallTypeCall<object>(tApi);
    var sRes = await ApiCallHelper.ApiCallTypeCall<object>(sApi);

    _showDialog = false;

    if (tRes.IsSuccessStatusCode && sRes.IsSuccessStatusCode)
    {
      ToastService.ShowToast(Shared.Toast.ToastLevel.Success, "Saved", "Orders");
      await ReloadAsync();
    }
    else
    {
      ToastService.ShowToast(Shared.Toast.ToastLevel.Error, "Failed to save", "Orders");
    }
  }
}

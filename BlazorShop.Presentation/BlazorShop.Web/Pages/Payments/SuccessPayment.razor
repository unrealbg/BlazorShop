@page "/payment-success"

<div class="container">
    <div class="row">
        <div class="col-lg-12">
            <div class="p-2 mt-3 w-100 bg-warning">
                <div class="card m-2">
                    <div class="card-header">
                        <h4 class="text-center">Payment Success</h4>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-success" role="alert">
                            <h4 class="alert-heading text-center">Thank you for your purchase!</h4>
                            <p class="text-center">Your payment was successful. Your order will be delivered soon.</p>
                            <hr>
                            <p class="mb-0 text-center">You can track your order in the <a href="/my-orders">My Orders</a> page.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState>? UserAuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (UserAuthState is null)
            {
                return;
            }

            var authState = await UserAuthState;
            var user = authState?.User;
            if (user?.Identity?.IsAuthenticated == true)
            {
                var cartString = await CookieStorageService.GetAsync(Constant.Cart.Name);
                if (!string.IsNullOrEmpty(cartString))
                {
                    var list = JsonSerializer.Deserialize<IEnumerable<ProcessCart>>(cartString) ?? Enumerable.Empty<ProcessCart>();
                    var userId = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;

                    if (!string.IsNullOrEmpty(userId) && list.Any())
                    {
                        var arc = list.Select(x => new CreateOrderItem
                        {
                            ProductId = x.ProductId,
                            Quantity = x.Quantity,
                            UserId = userId
                        });

                        await CartService.SaveCheckoutHistory(arc);
                        await CookieStorageService.RemoveAsync(Constant.Cart.Name);
                    }
                }
            }
        }
        catch
        {
            // ignored
        }
    }
}

@page "/admin"
@layout AdminLayout

<section class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 mt-8 mb-12 sm:mb-16">
  <div class="rounded-xl bg-white/80 shadow p-6" style="min-height: 600px; overflow: auto">
    <header class="text-center">
      <h2 class="text-2xl font-bold">Admin Dashboard</h2>
    </header>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mt-6">
      <div class="rounded border p-4 bg-neutral-50">
        <div class="text-sm text-neutral-500">Total Revenue</div>
        <div class="text-2xl font-bold">€ @_totalRevenue.ToString("F2")</div>
      </div>
      <div class="rounded border p-4 bg-neutral-50">
        <div class="text-sm text-neutral-500">Today's Revenue</div>
        <div class="text-2xl font-bold">€ @_todayRevenue.ToString("F2")</div>
      </div>
      <div class="rounded border p-4 bg-neutral-50">
        <div class="text-sm text-neutral-500">Orders</div>
        <div class="text-2xl font-bold">@_countOrders</div>
      </div>
      <div class="rounded border p-4 bg-neutral-50">
        <div class="text-sm text-neutral-500">Delivered</div>
        <div class="text-2xl font-bold">@_deliveredCount</div>
      </div>
    </div>

    <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-4 text-sm">
      <div class="rounded border p-3 text-neutral-700"><b>Pending</b>: @_pendingCount</div>
      <div class="rounded border p-3 text-blue-700"><b>Shipped</b>: @_shippedCount</div>
      <div class="rounded border p-3 text-blue-700"><b>InTransit</b>: @_inTransitCount</div>
      <div class="rounded border p-3 text-emerald-700"><b>OutForDelivery</b>: @_ofdCount</div>
      <div class="rounded border p-3 text-emerald-800"><b>Delivered</b>: @_deliveredCount</div>
    </div>

    <article class="mt-6 rounded border">
      <div class="px-4 py-2 bg-neutral-100 font-semibold">Recent Orders</div>
      <div class="p-4 overflow-x-auto">
        <table class="min-w-full text-sm">
          <thead>
            <tr class="bg-neutral-50 text-left">
              <th class="px-3 py-2">Created</th>
              <th class="px-3 py-2">Reference</th>
              <th class="px-3 py-2">Status</th>
              <th class="px-3 py-2">Total (€)</th>
              <th class="px-3 py-2">Tracking</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-neutral-200">
            @if (_recentOrders.Any())
            {
              @foreach (var o in _recentOrders)
              {
                <tr>
                  <td class="px-3 py-2">@o.CreatedOn.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                  <td class="px-3 py-2">@o.Reference</td>
                  <td class="px-3 py-2">@o.ShippingStatus</td>
                  <td class="px-3 py-2">@o.TotalAmount.ToString("F2")</td>
                  <td class="px-3 py-2">
                    @if (!string.IsNullOrWhiteSpace(o.TrackingUrl))
                    {
                      <a class="text-blue-700 hover:underline" href="@o.TrackingUrl" target="_blank" rel="noopener">Track</a>
                    }
                    else if (!string.IsNullOrWhiteSpace(o.TrackingNumber))
                    {
                      <span class="text-neutral-600">@o.TrackingNumber</span>
                    }
                    else
                    {
                      <span class="text-neutral-500">—</span>
                    }
                  </td>
                </tr>
              }
            }
            else
            {
              <tr>
                <td class="px-3 py-6 text-center text-neutral-500" colspan="5">No recent orders</td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </article>

    @if (_orderItems.Any())
    {
      var groupByDate = _orderItems.GroupBy(x => x.DatePurchased.Date).ToList();
      decimal grandTotal = 0;

      foreach (var group in groupByDate)
      {
        decimal dailyTotal = group.Sum(x => x.AmountPayed);
        grandTotal += dailyTotal;

        <article class="mt-6 rounded border">
          <div class="px-4 py-2 bg-neutral-100 font-semibold">
            @group.Key.ToShortDateString() - Total: € @dailyTotal.ToString("F2")
          </div>
          <div class="p-4 overflow-x-auto">
            <table class="min-w-full text-sm">
              <thead>
                <tr class="bg-neutral-50 text-left">
                  <th class="px-3 py-2">Name</th>
                  <th class="px-3 py-2">Email</th>
                  <th class="px-3 py-2">Product</th>
                  <th class="px-3 py-2">Quantity</th>
                  <th class="px-3 py-2">Amount (€)</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-neutral-200">
                @foreach (var orderItem in group)
                {
                  <tr>
                    <td class="px-3 py-2">@orderItem.CustomerName</td>
                    <td class="px-3 py-2">@orderItem.CustomerEmail</td>
                    <td class="px-3 py-2">@orderItem.ProductName</td>
                    <td class="px-3 py-2">@orderItem.QuantityOrdered</td>
                    <td class="px-3 py-2">@orderItem.AmountPayed.ToString("F2")</td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
        </article>
      }

      <footer class="mt-4 text-right font-bold">
        Grand Total: € @grandTotal.ToString("F2")
      </footer>
    }
    else
    {
      <div class="mt-6 rounded-md bg-blue-50 text-blue-800 px-6 py-5 text-center shadow font-semibold">
        No sales data available.
      </div>
    }
  </div>
</section>

@code {
  private string _trackingOrderId = string.Empty;
  private string _carrier = string.Empty;
  private string _trackingNumber = string.Empty;
  private string _trackingUrl = string.Empty;
  private string _statusOrderId = string.Empty;
  private string _shippingStatus = "PendingShipment";
  private DateTime? _shippedOn;
  private DateTime? _deliveredOn;

  private async Task UpdateTrackingAsync()
  {
    if (!Guid.TryParse(_trackingOrderId, out var id))
    {
      ToastService.ShowToast(Shared.Toast.ToastLevel.Error, "Invalid Order ID", "Tracking");
      return;
    }

    var client = await HttpClientHelper.GetPrivateClientAsync();
    var api = new ApiCall { Client = client, Route = $"{Constant.Cart.GetAllOrders}/{id}/tracking", Type = Constant.ApiCallType.Update, Model = new { Carrier = _carrier, TrackingNumber = _trackingNumber, TrackingUrl = _trackingUrl } };
    var http = await ApiCallHelper.ApiCallTypeCall<object>(api);
    if (http.IsSuccessStatusCode)
    {
      ToastService.ShowToast(Shared.Toast.ToastLevel.Success, "Tracking saved", "Tracking");
    }
    else
    {
      ToastService.ShowToast(Shared.Toast.ToastLevel.Error, "Failed to save tracking", "Tracking");
    }
  }

  private async Task UpdateStatusAsync()
  {
    if (!Guid.TryParse(_statusOrderId, out var id))
    {
      ToastService.ShowToast(Shared.Toast.ToastLevel.Error, "Invalid Order ID", "Shipping Status");
      return;
    }

    var client = await HttpClientHelper.GetPrivateClientAsync();
    var api = new ApiCall { Client = client, Route = $"{Constant.Cart.GetAllOrders}/{id}/shipping-status", Type = Constant.ApiCallType.Update, Model = new { ShippingStatus = _shippingStatus, ShippedOn = _shippedOn, DeliveredOn = _deliveredOn } };
    var http = await ApiCallHelper.ApiCallTypeCall<object>(api);
    if (http.IsSuccessStatusCode)
    {
      ToastService.ShowToast(Shared.Toast.ToastLevel.Success, "Shipping status saved", "Shipping Status");
    }
    else
    {
      ToastService.ShowToast(Shared.Toast.ToastLevel.Error, "Failed to save shipping status", "Shipping Status");
    }
  }
}
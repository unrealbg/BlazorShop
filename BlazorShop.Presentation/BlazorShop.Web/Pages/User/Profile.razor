@page "/profile"

<section class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 mb-6">
    <div class="mt-6 bg-white/80 rounded-xl shadow">
        <div class="px-6 py-4 border-b">
            <h1 class="text-2xl font-bold text-center">My Profile</h1>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
            <!-- Side Navigation Menu -->
            <aside class="space-y-2">
                <div class="rounded-lg border">
                    <div class="px-4 py-2 bg-neutral-900 text-white text-center font-semibold">Menu</div>
                    <ul class="divide-y">
                        <li class="px-4 py-2 @(ActiveTab == "profile" ? "bg-neutral-100 font-semibold" : null)">
                            <button class="text-left w-full" @onclick='() => SwitchTab("profile")'>Profile Details</button>
                        </li>
                        <li class="px-4 py-2 @(ActiveTab == "edit" ? "bg-neutral-100 font-semibold" : null)">
                            <button class="text-left w-full" @onclick='() => SwitchTab("edit")'>Edit Profile</button>
                        </li>
                        <li class="px-4 py-2 @(ActiveTab == "orders" ? "bg-neutral-100 font-semibold" : null)">
                            <button class="text-left w-full" @onclick='() => SwitchTab("orders")'>My Orders</button>
                        </li>
                        <li class="px-4 py-2 @(ActiveTab == "password" ? "bg-neutral-100 font-semibold" : null)">
                            <button class="text-left w-full" @onclick='() => SwitchTab("password")'>Change Password</button>
                        </li>
                    </ul>
                </div>
            </aside>

            <!-- Main Content Section -->
            <main class="md:col-span-2">
                <div class="shadow p-4 rounded-lg bg-white/80">
                    @if (ActiveTab == "profile")
                    {
                        <div>
                            <h4 class="text-neutral-900 font-bold">Profile Details</h4>
                            <div class="p-4 rounded border mt-2">
                                <div class="text-center mb-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-neutral-700 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                        <circle cx="12" cy="8" r="4"/>
                                        <path d="M6 22c0-3.3 2.7-6 6-6s6 2.7 6 6"/>
                                    </svg>
                                </div>
                                <div class="grid grid-cols-2 gap-2">
                                    <p><strong>Username:</strong></p>
                                    <p class="text-right">@_userName</p>
                                </div>
                                <hr class="my-2" />
                                <div class="grid grid-cols-2 gap-2">
                                    <p><strong>Email:</strong></p>
                                    <p class="text-right">@_userEmail</p>
                                </div>
                            </div>
                        </div>
                    }
                    else if (ActiveTab == "edit")
                    {
                        <div>
                            <h4 class="text-neutral-900 font-bold">Edit Profile</h4>
                            <EditForm Model="@_updateProfile" OnValidSubmit="UpdateProfileAsync">
                                <DataAnnotationsValidator />
                                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <div>
                                        <ValidationMessage For="@(() => _updateProfile.FullName)" />
                                        <FloatingTextInput class="w-full border rounded px-3 py-2" @bind-Value="_updateProfile.FullName" Label="Full Name" Placeholder="John Doe" />
                                    </div>
                                    <div>
                                        <ValidationMessage For="@(() => _updateProfile.Email)" />
                                        <FloatingTextInput class="w-full border rounded px-3 py-2" @bind-Value="_updateProfile.Email" Label="Email Address" Type="text" Placeholder="john@email.com" />
                                    </div>
                                    <div>
                                        <FloatingTextInput class="w-full border rounded px-3 py-2" @bind-Value="_updateProfile.PhoneNumber" Label="Phone (optional)" Type="text" Placeholder="+359 ..." />
                                    </div>
                                </div>
                                <div class="mt-4 flex gap-2">
                                    <button type="submit" class="inline-flex items-center rounded bg-neutral-900 text-white px-4 py-2 font-semibold hover:bg-neutral-800">Save Changes</button>
                                    <button type="button" class="inline-flex items-center rounded bg-neutral-200 text-neutral-900 px-4 py-2 font-semibold hover:bg-neutral-300" @onclick='() => SwitchTab("profile")'>Cancel</button>
                                </div>
                            </EditForm>
                        </div>
                    }
                    else if (ActiveTab == "orders")
                    {
                        <div>
                            <h4 class="text-neutral-900 font-bold">My Orders</h4>
                            @if (_orderItems != null && _orderItems.Any())
                            {
                                var groupedOrders = _orderItems.GroupBy(order => order.DatePurchased.Date);
                                @foreach (var group in groupedOrders)
                                {
                                    <div class="mb-3 rounded border">
                                        <div class="px-4 py-2 bg-neutral-100"> <strong>Order Date:</strong> @group.Key.ToShortDateString()</div>
                                        <div class="p-4 space-y-2">
                                            @foreach (var order in group)
                                            {
                                                <ul class="list-disc list-inside">
                                                    <li><strong>Product:</strong> @order.ProductName</li>
                                                    <li><strong>Quantity:</strong> @order.QuantityOrdered</li>
                                                    <li><strong>Price:</strong> €@order.AmountPayed</li>
                                                </ul>
                                                <hr />
                                            }
                                            <div class="text-right font-bold">
                                                Total for @group.Key.ToShortDateString(): €@group.Sum(order => order.AmountPayed)
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="mt-3 text-right font-bold text-emerald-700">Overall Total: €@groupedOrders.Sum(group => group.Sum(order => order.AmountPayed))</div>
                            }
                            else
                            {
                                <div class="rounded-md bg-blue-50 text-blue-800 px-6 py-5 text-center shadow">You have no orders yet.</div>
                            }
                        </div>
                    }
                    else if (ActiveTab == "password")
                    {
                        <div>
                            <h4 class="text-neutral-900 font-bold">Change Password</h4>
                            <EditForm Model="@_changePasswordModel" OnValidSubmit="ChangePasswordAsync">
                                <DataAnnotationsValidator/>
                                <div class="mb-3">
                                    <label class="block text-sm text-neutral-600">Current Password:</label>
                                    <InputText type="password" class="w-full border rounded px-3 py-2" @bind-Value="_changePasswordModel.CurrentPassword" requred/>
                                    <ValidationMessage For="@(() => _changePasswordModel.CurrentPassword)"/>
                                </div>
                                <div class="mb-3">
                                    <label class="block text-sm text-neutral-600">New Password:</label>
                                    <InputText type="password" class="w-full border rounded px-3 py-2" @bind-Value="_changePasswordModel.NewPassword" requred/>
                                    <ValidationMessage For="@(() => _changePasswordModel.NewPassword)"/>
                                </div>
                                <div class="mb-3">
                                    <label class="block text-sm text-neutral-600">Confirm New Password:</label>
                                    <InputText type="password" class="w-full border rounded px-3 py-2" @bind-Value="_changePasswordModel.ConfirmPassword" required/>
                                    <ValidationMessage For="@(() => _changePasswordModel.ConfirmPassword)"/>
                                </div>
                                <button type="submit" class="inline-flex items-center justify-center w-full rounded bg-emerald-600 text-white px-4 py-2 font-semibold hover:bg-emerald-700">Change Password</button>
                            </EditForm>
                        </div>
                    }
                </div>
            </main>
        </div>
    </div>
</section>

<style>
    .active-tab { background-color: rgba(0, 123, 255, 0.1); font-weight: bold; }
    .active-tab button { color: #007bff !important; }
</style>

@code {
    private string ActiveTab = "profile"; // Default active tab
    private PasswordChangeModel _changePasswordModel = new();
    private BlazorShop.Web.Shared.Models.Authentication.UpdateProfileModel _updateProfile = new();
    private string _userEmail = string.Empty;
    private string _userName = string.Empty;
    private IEnumerable<GetOrderItem> _orderItems = new List<GetOrderItem>();

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;

        var emailClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);
        if (emailClaim != null)
        {
            _userEmail = emailClaim.Value;
            _updateProfile.Email = _userEmail;
        }

        var fullNameClaim = user.Claims.FirstOrDefault(c => c.Type == "FullName");
        if (fullNameClaim != null)
        {
            _updateProfile.FullName = fullNameClaim.Value;
            _userName = fullNameClaim.Value;
        }
        else
        {
            _userName = _userEmail;
        }

        _orderItems = await CartService.GetCheckoutHistoryByUserId();
    }

    private void SwitchTab(string tabName)
    {
        ActiveTab = tabName;
        StateHasChanged();
    }

    private async Task ChangePasswordAsync()
    {
        var response = await AuthenticationService.ChangePassword(_changePasswordModel);

        if (response.Success)
        {
            ToastService.ShowSuccessToast("Password changed successfully.");
            _changePasswordModel = new ();
        }
        else
        {
            ToastService.ShowErrorToast(response.Message);
        }
    }

    private async Task UpdateProfileAsync()
    {
        var response = await AuthenticationService.UpdateProfile(_updateProfile);
        if (response.Success)
        {
            ToastService.ShowSuccessToast("Profile updated.");
            _userEmail = _updateProfile.Email;
            _userName = _updateProfile.FullName;
            ActiveTab = "profile";
        }
        else
        {
            ToastService.ShowErrorToast(response.Message);
        }
    }
}
